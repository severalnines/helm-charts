---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cmon-master
  labels:
    app: cmon-master
    run: cmon-master
spec:
  selector:
    matchLabels:
      app: cmon-master
      run: cmon-master
  replicas: 1
  serviceName: cmon-master
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9954"
      labels:
        app: cmon-master
        run: cmon-master
    spec:
      initContainers:
      - name: init-cmon
        image: {{ include "cc.cmonImage" . }}
        command: [ 'sh', '-c', 'cp /tmp/cmon.cnf /etc/cmon.cnf; /usr/bin/init-cmon.sh']
        volumeMounts:
        - mountPath: /tmp/cmon.cnf
          subPath: cmon.cnf
          name: cmon-cnf-cfg
        - mountPath: /root/.s9s/s9s.conf
          subPath: s9s.conf
          name: s9s-cnf-cfg
      - name: check-cmon-configs
        image: {{ include "cc.cmonImage" . }}
        command: [ 'sh', '-c', '/usr/bin/python3 /usr/bin/update-cmon-configs.py']
        volumeMounts:
        - mountPath: /etc/cmon.cnf
          subPath: cmon.cnf
          name: cmon-cnf-cfg
        - mountPath: /etc/cmon.d/
          name: cmon-master-pv
      - name: init-ccmgr
        image: {{ include "cc.ccmgrImage" . }}
        imagePullPolicy: Always
        command: 
        - sh
        - -c
        - |
          if [ ! -f /usr/share/ccmgr/ccmgr.yaml ]; then
            echo "Initializing ccmgr..."
            # Create empty config file first
            touch /usr/share/ccmgr/ccmgr.yaml
            ccmgradm init \
              --local-cmon \
              --cmon-url cmon-master:9501 \
              --cmon-ssh-url cmon-ssh:9511 \
              --frontend-path /var/www/frontend \
              --port 19051 \
              --kuber-proxy-url http://localhost:{{ .Values.cmon.kuberProxy.env.HTTP_PORT | default 8081 }}
          else
            echo "ccmgr already initialized, skipping init"
          fi
        volumeMounts:
        - mountPath: /usr/share/ccmgr
          name: cmon-ccmgr-pv
      containers:
      - name: cmon-master
        image: {{ include "cc.cmonImage" . }}
        command: [ '/usr/sbin/cmon' ]
        args:
        {{- with .Values.cmon.extra_args }}
        {{- toYaml . | nindent 8 }}
        {{ end }}
        securityContext:
          privileged: True
        ports:
        - containerPort: 9501
          protocol: TCP
          name: cmon9501
        - containerPort: 9500
          protocol: TCP
          name: cmon9500
        volumeMounts:
        - mountPath: /etc/cmon.d/
          name: cmon-master-pv
        - mountPath: /etc/cmon.cnf
          subPath: cmon.cnf
          name: cmon-cnf-cfg
        - mountPath: /root/.s9s/s9s.conf
          subPath: s9s.conf
          name: s9s-cnf-cfg
        - mountPath: /root/.ssh-keys
          name: ssh-keys
        {{ if .Values.cmon.sshKeysSecretName }}
        - mountPath: /root/.ssh-keys-user
          name: ssh-keys-user
        {{ end }}
        - mountPath: /var/lib/cmon
          name: cmon-pv-var-lib-cmon
        {{ if .Values.cmon.license }}
        - mountPath: /root/.s9s/cmon-license
          name: cmon-license
        startupProbe:
          exec:
            command: ['sh', '-c', 'cat /root/.s9s/cmon-license/license | s9s --controller=https://localhost:9501 tree --save .runtime/cmon_license']
          timeoutSeconds: 10
          failureThreshold: 10
          periodSeconds: 5
        {{ end }}
        livenessProbe:
          httpGet:
            path: /v2/controller?operation=ping
            port: 9501
            scheme: HTTPS
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 30
        {{- with .Values.cmon.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      - name: cmon-cloud
        image: {{ include "cc.cmonImage" . }}
        command: ['sh', '-c', '/usr/sbin/cmon-cloud']
        securityContext:
          privileged: True
        ports:
        - containerPort: 9518
          protocol: TCP
          name: cmon9518
      - name: cmon-sd
        image: {{ include "cc.cmonSdImage" . }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
          name: cmon-sd8080
        env:
          - name: CMON_USERNAME
            valueFrom:
              secretKeyRef:
                name: cmon-credentials
                key: cmon-user
                optional: false
          - name: CMON_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cmon-credentials
                key: cmon-password
                optional: false
        {{- with .Values.cmon.sd.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      - name: cmon-exporter
        image: {{ include "cc.cmonExporterImage" . }}
        ports:
        - containerPort: 9954
          protocol: TCP
          name: cmon-exp9954
        env:
          - name: CMON_USERNAME
            valueFrom:
              secretKeyRef:
                name: cmon-credentials
                key: cmon-user
                optional: false
          - name: CMON_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cmon-credentials
                key: cmon-password
                optional: false
        {{- with .Values.cmon.exporter.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      - name: cmon-ssh
        image: {{ include "cc.cmonImage" . }}
        command: ['sh', '-c', '/usr/sbin/cmon-ssh']
        ports:
        - containerPort: 9511
          protocol: TCP
          name: cmon-ssh9511
        volumeMounts:
        - mountPath: /etc/cmon.d/
          name: cmon-master-pv
        {{ if .Values.cmon.sshKeysSecretName }}
        - mountPath: /root/.ssh-keys-user
          name: ssh-keys-user
        {{ end }}
      - name: ccmgr
        image: {{ include "cc.ccmgrImage" . }}
        imagePullPolicy: Always
        ports:
        - containerPort: 19051
          protocol: TCP
          name: ccmgr19051
        volumeMounts:
        - mountPath: /usr/share/ccmgr
          name: cmon-ccmgr-pv
        - mountPath: /var/www/frontend/config.js
          subPath: config.js
          name: config-js-cfg
        {{- with .Values.cmon.ccmgr.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      - name: kuber-proxy
        image: {{ include "cc.kuberProxyImage" . }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.cmon.kuberProxy.env.HTTP_PORT | default 8081 }}
          protocol: TCP
          name: http-port
        - containerPort: {{ .Values.cmon.kuberProxy.env.GRPC_PORT | default 50051 }}
          protocol: TCP
          name: grpc-port
        env:
        - name: HTTP_PORT
          value: "{{ .Values.cmon.kuberProxy.env.HTTP_PORT | default 8080 }}"
        - name: GRPC_PORT
          value: "{{ .Values.cmon.kuberProxy.env.GRPC_PORT | default 50051 }}"
        - name: JWT_SECRET_PATH
          value: "{{ .Values.cmon.kuberProxy.env.JWT_SECRET_PATH | default "/usr/share/ccmgr/jwt_secret.key" }}"
        - name: BASE_DIR
          value: "{{ .Values.cmon.kuberProxy.env.BASE_DIR | default "/usr/share/kuber-proxy" }}"
        - name: STATE_STORAGE
          value: "{{ .Values.cmon.kuberProxy.env.STATE_STORAGE | default "jetstream" }}"
        - name: DAPR_APP_ID
          value: "{{ .Values.cmon.kuberProxy.env.DAPR_APP_ID | default "kuber-proxy" }}"
        {{- if .Values.cmon.kuberProxy.env.PROXY_CERT_PATH }}
        - name: PROXY_CERT_PATH
          value: "{{ .Values.cmon.kuberProxy.env.PROXY_CERT_PATH }}"
        {{- end }}
        {{- if .Values.cmon.kuberProxy.env.PROXY_KEY_PATH }}
        - name: PROXY_KEY_PATH
          value: "{{ .Values.cmon.kuberProxy.env.PROXY_KEY_PATH }}"
        {{- end }}
        volumeMounts:
        - mountPath: /usr/share/ccmgr
          name: cmon-ccmgr-pv
          readOnly: true
        - mountPath: {{ .Values.cmon.kuberProxy.env.BASE_DIR | default "/usr/share/kuber-proxy" }}
          name: kuber-proxy-pv
        {{- with .Values.cmon.kuberProxy.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
      - name: cmon-master-pv
        persistentVolumeClaim:
          claimName: cmon-master-volume
      - name: cmon-pv-var-lib-cmon
        persistentVolumeClaim:
          claimName: cmon-var-lib-cmon
      - name: cmon-ccmgr-pv
        persistentVolumeClaim:
          claimName: cmon-ccmgr-volume
      - name: kuber-proxy-pv
        persistentVolumeClaim:
          claimName: kuber-proxy-volume
      - name: cmon-cnf-cfg
        secret:
          secretName: cmon-cnf
      - name: cmon-license
        secret:
          secretName: cmon-license
          optional: true
      - name: s9s-cnf-cfg
        secret:
          secretName: s9s-conf
      - name: ssh-keys
        secret:
          secretName: ssh-keys
          defaultMode: 0600
      {{- with .Values.cmon.sshKeysSecretName }}
      - name: ssh-keys-user
        secret:
          secretName: {{ . }}
          defaultMode: 0600
      {{- end }}
      - name: config-js-cfg
        configMap:
          name: config-js
      {{- with .Values.cmon.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cmon.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cmon.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cmon-master-volume
spec:
  {{ with .Values.storageClassName }}
  storageClassName: {{ . }}
  {{ end }}
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cmon-var-lib-cmon
spec:
  {{ with .Values.storageClassName }}
  storageClassName: {{ . }}
  {{ end }}
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cmon-ccmgr-volume
spec:
  {{ with .Values.storageClassName }}
  storageClassName: {{ . }}
  {{ end }}
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kuber-proxy-volume
spec:
  {{ with .Values.storageClassName }}
  storageClassName: {{ . }}
  {{ end }}
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi