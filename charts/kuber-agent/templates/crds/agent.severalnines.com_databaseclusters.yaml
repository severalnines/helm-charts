---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: databaseclusters.agent.severalnines.com
spec:
  group: agent.severalnines.com
  names:
    kind: DatabaseCluster
    listKind: DatabaseClusterList
    plural: databaseclusters
    singular: databasecluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Database operator type
      jsonPath: .spec.type
      name: Type
      type: string
    - description: Cluster size
      jsonPath: .spec.size
      name: Size
      type: integer
    - description: Cluster phase
      jsonPath: .status.phase
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DatabaseCluster is the Schema for the databaseclusters API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DatabaseClusterSpec defines the desired state of DatabaseCluster
            properties:
              advanced:
                additionalProperties:
                  type: string
                description: |-
                  Advanced contains operator-specific configuration options
                  Use this field to specify configurations unique to a particular database operator
                type: object
              externalAccess:
                description: |-
                  ExternalAccess defines how the database can be accessed from outside the Kubernetes cluster
                  This can be through LoadBalancer, NodePort, or both
                properties:
                  loadBalancer:
                    description: LoadBalancer configures a LoadBalancer service for
                      external access
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations to add to the LoadBalancer service
                        type: object
                      enabled:
                        default: false
                        description: Enabled indicates whether to create a LoadBalancer
                          service
                        type: boolean
                      loadBalancerIP:
                        description: |-
                          LoadBalancerIP is an optional field to specify the loadBalancerIP when a LoadBalancer service is requested
                          Some cloud providers allow you to specify the loadBalancerIP
                        type: string
                      loadBalancerSourceRanges:
                        description: LoadBalancerSourceRanges is an optional field
                          that specifies the CIDR ranges that are allowed to access
                          the LoadBalancer
                        items:
                          type: string
                        type: array
                      ports:
                        description: Port defines the port mappings for the LoadBalancer
                          service
                        items:
                          description: ServicePort defines a port mapping for a Kubernetes
                            service
                          properties:
                            name:
                              description: Name is the name of this port within the
                                service
                              maxLength: 15
                              pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
                              type: string
                            nodePort:
                              description: |-
                                NodePort is the port that will be exposed on each node when using NodePort type
                                If unspecified, a random port will be allocated
                              format: int32
                              maximum: 32767
                              minimum: 30000
                              type: integer
                            port:
                              description: Port is the port that will be exposed by
                                the service
                              format: int32
                              maximum: 65535
                              minimum: 1
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol for this port. Defaults to TCP
                              enum:
                              - TCP
                              - UDP
                              - SCTP
                              type: string
                            targetPort:
                              description: |-
                                TargetPort is the port to access on the pods targeted by the service
                                If unspecified, defaults to the value of Port
                              format: int32
                              maximum: 65535
                              minimum: 1
                              type: integer
                          required:
                          - name
                          - port
                          type: object
                        maxItems: 10
                        minItems: 0
                        type: array
                    required:
                    - enabled
                    type: object
                  nodePort:
                    description: NodePort configures a NodePort service for external
                      access
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations to add to the NodePort service
                        type: object
                      enabled:
                        default: false
                        description: Enabled indicates whether to create a NodePort
                          service
                        type: boolean
                      ports:
                        description: Port defines the port mappings for the NodePort
                          service
                        items:
                          description: ServicePort defines a port mapping for a Kubernetes
                            service
                          properties:
                            name:
                              description: Name is the name of this port within the
                                service
                              maxLength: 15
                              pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
                              type: string
                            nodePort:
                              description: |-
                                NodePort is the port that will be exposed on each node when using NodePort type
                                If unspecified, a random port will be allocated
                              format: int32
                              maximum: 32767
                              minimum: 30000
                              type: integer
                            port:
                              description: Port is the port that will be exposed by
                                the service
                              format: int32
                              maximum: 65535
                              minimum: 1
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol for this port. Defaults to TCP
                              enum:
                              - TCP
                              - UDP
                              - SCTP
                              type: string
                            targetPort:
                              description: |-
                                TargetPort is the port to access on the pods targeted by the service
                                If unspecified, defaults to the value of Port
                              format: int32
                              maximum: 65535
                              minimum: 1
                              type: integer
                          required:
                          - name
                          - port
                          type: object
                        maxItems: 10
                        minItems: 0
                        type: array
                    required:
                    - enabled
                    type: object
                type: object
              namespace:
                description: |-
                  Namespace specifies the namespace where the cluster should be deployed
                  If not specified, it will be deployed in the same namespace as the DatabaseCluster resource
                type: string
              resources:
                description: Resources defines the resource requirements for database
                  pods
                properties:
                  limitsCpu:
                    description: LimitsCPU specifies the CPU limits (e.g., "1")
                    type: string
                  limitsMemory:
                    description: LimitsMemory specifies the memory limits (e.g., "2Gi")
                    type: string
                  requestsCpu:
                    description: RequestsCPU specifies the CPU requests (e.g., "500m")
                    type: string
                  requestsMemory:
                    description: RequestsMemory specifies the memory requests (e.g.,
                      "1Gi")
                    type: string
                type: object
              size:
                description: Size specifies the number of instances in the database
                  cluster
                format: int32
                minimum: 1
                type: integer
              storage:
                description: Storage defines the storage requirements for the database
                  cluster
                properties:
                  size:
                    description: Size specifies the storage size (e.g., "10Gi")
                    type: string
                  storageClass:
                    description: |-
                      StorageClass specifies the storage class to use
                      If not specified, the default storage class will be used
                    type: string
                required:
                - size
                type: object
              type:
                allOf:
                - enum:
                  - pxc
                  - cnpg
                  - stackgres
                  - moco
                  - eck
                - enum:
                  - pxc
                  - cnpg
                  - stackgres
                  - moco
                  - eck
                description: Type specifies the type of database operator to use for
                  this cluster
                type: string
              version:
                description: |-
                  Version specifies the database version to deploy
                  If not specified, the default version for the operator will be used
                type: string
            required:
            - size
            - storage
            - type
            type: object
          status:
            description: DatabaseClusterStatus defines the observed state of DatabaseCluster
            properties:
              conditions:
                description: Conditions represents the latest available observations
                  of the cluster's state
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              endpoints:
                description: Endpoints provides database connection endpoints
                items:
                  description: DatabaseClusterEndpoint defines a database connection
                    endpoint
                  properties:
                    host:
                      description: Host is the hostname or IP address
                      type: string
                    port:
                      description: Port is the port number
                      format: int32
                      type: integer
                    type:
                      description: Type indicates the endpoint type (primary, read,
                        etc.)
                      type: string
                  required:
                  - host
                  - port
                  - type
                  type: object
                type: array
              externalEndpoints:
                description: ExternalEndpoints provides external access endpoints
                  for the database
                items:
                  description: DatabaseClusterEndpoint defines a database connection
                    endpoint
                  properties:
                    host:
                      description: Host is the hostname or IP address
                      type: string
                    port:
                      description: Port is the port number
                      format: int32
                      type: integer
                    type:
                      description: Type indicates the endpoint type (primary, read,
                        etc.)
                      type: string
                  required:
                  - host
                  - port
                  - type
                  type: object
                type: array
              instances:
                description: Instances represents the status of individual instances
                  in the cluster
                items:
                  description: DatabaseClusterInstanceStatus defines status information
                    for a single instance
                  properties:
                    name:
                      description: Name is the instance name
                      type: string
                    phase:
                      description: Phase indicates the instance phase (Running, Failed,
                        etc.)
                      type: string
                    role:
                      description: Role indicates the instance role (primary, replica,
                        etc.)
                      type: string
                    startTime:
                      description: StartTime is when the instance was created
                      format: date-time
                      type: string
                  required:
                  - name
                  - phase
                  - role
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed cluster
                format: int64
                type: integer
              phase:
                description: |-
                  Phase represents the current phase of the database cluster
                  (e.g., Pending, Creating, Running, Failed)
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
