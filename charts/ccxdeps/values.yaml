# Default values for ccxdeps.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# createDatabases option will create postgres database
createDatabases: true
# installOperators option will install postgres operator
installOperators: true
# ingressController option will install nginx ingress controller
ingressController:
  enabled: false

nginx-ingress-controller:
  config:
    allow-backend-server-header: "true"
    allow-snippet-annotations: "true"
  kind: DaemonSet
  metrics:
    enabled: true
  publishService:
    enabled: true
# nats option will install nats streaming
nats:
  enabled: true
  nameOverride: "ccx-nats"
  exporter:
    enabled: true
  nats:
    jetstream:
      enabled:
        true
      fileStorage:
        enabled: true
    logging:
      debug: false
      trace: false
# configuration option for postgres operator
postgres-operator:
  configKubernetes:
    enable_pod_disruption_budget: false
# configuration option for postgres database
postgresql:
  replicas: 1
  storageClass:
# installation and configuration option for external-dns
external-dns:
  enabled: false
  watchReleaseNamespace: true
  domainFilters:
  - ccx.example.org
  interval: 10s
  policy: sync
  serviceTypeFilter:
  # ExternalName type is required
  - ExternalName
  sources:
  # Service source is required
  - service
  txtPrefix: txt-
# installation and configuration option for mysql operator
oracle-mysql-operator:
  enabled: true
  fullnameOverride: mysql-operator
# installation and configuration option for mysql innodb
mysql-innodbcluster:
  enabled: true
  credentials:
    root:
      user: cmon
      password: Super$3cr3t
      host: "%"
  serverInstances: 1
  serverConfig:
    mycnf: |-
      [mysqld]
      binlog_expire_logs_seconds=604800
  tls:
    useSelfSigned: true
  datadirVolumeClaimTemplate:
    resources:
      requests:
        storage: 20Gi
  podSpec:
    containers:
    - name: mysql
      resources:
        requests:
          memory: "2048Mi"
# installation and configuration option for monitoring
ccx-monitoring:
  enabled: true
  cmon_sd_url: &cmon_sd_url "http://cmon-master:8080"
  # by default this sets to release.name-victoria-metrics-single-server
  # change if necessary
  victoria_metrics_url: &victoria_metrics_url "http://victoria-metrics:9090"
  # by default this sets to release.name-alertmanager
  # change if necessary
  alertmanager_url: &alertmanager_url "http://alertmanager:9093"

  victoria-metrics-single:
    #set enabled to false to disable this app
    enabled: true
    rbac:
      namespaced: true
    server:
      fullnameOverride: victoria-metrics
      service:
        servicePort: 9090
        clusterIP: null
      statefulSet:
        enabled: false
      podAnnotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8428'
      extraArgs:
        envflag.enable: "true"
        envflag.prefix: VM_
        loggerFormat: json
        promscrape.maxScrapeSize: 56777216
        maxLabelsPerTimeseries: 99
      scrape:
        enabled: true
        configMap: ""
        ### below is standard victoria metrics config, change as needed
        ### provided is simple, default config
        config:
          global:
            scrape_interval: 1m
            scrape_timeout: 10s
            external_labels:
              use_cmon_sd: true
              #monitor: clustercontrol is required DO NOT REMOVE
              monitor: clustercontrol
          scrape_configs:
            # -- Scrape rule for scrape victoriametrics
            - job_name: victoriametrics
              static_configs:
                - targets: [ "localhost:8428" ]
        extraScrapeConfigs:
          ### CMON SERVICE DISCOVERY
          - job_name: cmon-sd
            http_sd_configs:
              - url: *cmon_sd_url
            relabel_configs:
              - source_labels: [__address__]
                regex: '(.*):(\d+)'
                target_label: ip
                replacement: '${1}'
              - target_label: use_cmon_sd
                replacement: true
              - target_label: monitor
                replacement: clustercontrol
          ### END CMON SERVICE DISCOVERY


  victoria-metrics-alert:
    #set enabled to false to disable this app
    enabled: true
    rbac:
      namespaced: true
    server:
      fullnameOverride: victoria-metrics-alert

      # vmalert reads metrics from source, next section represents its configuration. It can be any service which supports
      # MetricsQL or PromQL.
      datasource:
        url: *victoria_metrics_url

      notifier:
        alertmanager:
          url: *alertmanager_url

      replicaCount: 1

  alertmanager:
    #set enabled to false to disable this app
    enabled: true
    replicaCount: 1
    fullnameOverride: alertmanager

  loki:
    enabled: true
    # Provide Ingress hostname by replacing loki.local which will be used by the Nginx Ingress.
    loki_host_url: &loki_host_url "loki.local"
    rbac:
      namespaced: true
    loki:
      compactor:
        compaction_interval: 10m
        delete_request_store: filesystem
        retention_delete_delay: 1h
        retention_delete_worker_count: 50
        retention_enabled: true
        working_directory: /var/loki/compactor
      limits_config:
        retention_period: 240h
      commonConfig:
        replication_factor: 1
      storage:
        type: filesystem
      schemaConfig:
        configs:
          - from: "2024-01-01"
            store: tsdb
            object_store: filesystem
            schema: v13
            index:
              prefix: loki_index_
              period: 24h
      ingester:
        chunk_encoding: snappy
      tracing:
        enabled: true
      querier:
        # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
        max_concurrent: 2
    deploymentMode: SingleBinary
    singleBinary:
      replicas: 1
      resources:
        requests:
          cpu: 0.2
          memory: 1Gi
    resultsCache:
      enabled: false
    chunksCache:
      enabled: false
    write:
      replicas: 0
    read:
      replicas: 0
    backend:
      replicas: 0
    minio:
      enabled: false
    test:
      enabled: false
    lokiCanary:
      enabled: false

  grafana:
    enabled: false
  node-exporter:
    enabled: false
  prometheus-blackbox-exporter:
    enabled: false
  kube-state-metrics:
    enabled: false

keycloak:
  fullnameOverride: "keycloak"
  enabled: false
  httpRelativePath: /keycloak/
  proxyHeaders: "xforwarded"
  auth:
    adminPassword: Super$3cr3t
  postgresql:
    enabled: false
  externalDatabase:
    host: "acid-ccx"
    port: 5432
    user: ccx
    database: ccx_keycloak
    existingSecret: ccx.acid-ccx.credentials.postgresql.acid.zalan.do
    existingSecretPasswordKey: password
  resources:
    requests:
      memory: 100Mi